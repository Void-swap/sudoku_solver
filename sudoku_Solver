public class sudokuSolver {

    public static boolean isSafe(int sudoku[][] , int row , int column , int digit){

        //column
        for(int i=0 ; i<9 ; i++){
            if(sudoku[i][column]==digit)
            return false;
        }

        //row
        for(int j=0 ; j<9 ; j++){
            if(sudoku[row][j]==digit)
            return false;
        }

        //grid (mini/ sub grid)
        int startRow=(row/3)*3;
        int startColumn=(column/3)*3;
        for(int i=startRow ; i<startRow+3 ; i++){
            for(int j=startColumn ; j<startColumn+3 ; j++){
                if(sudoku[i][j]==digit){
                return false;
                }
            }
        }
        return true;
    }

    public static void main(String arg[]){
        int sudoku[][]={
    {0,0,8,0,0,0,0,0,0},
    {4,9,0,1,5,7,0,0,2},
    {0,0,3,0,0,4,1,9,0},
    {1,8,5,0,6,0,0,2,0},
    {0,0,0,0,2,0,0,6,0},
    {9,6,0,4,0,5,3,0,0},
    {0,3,0,0,7,2,0,0,4},
    {0,4,9,0,3,0,0,7,5},
    {8,2,7,0,0,9,0,1,3}};

   sudokuSolution(sudoku, 0, 0);
    printSudoku(sudoku);
   
    

    }
    
    public static boolean sudokuSolution(int sudoku[][],int row , int column){
        //base case
        if(row == 9)
        return true;
        

        //RECURRSION

        int nextRow=row; 
        int nextColumn=column+1;
        if(column+1==9){
            nextRow=row+1;
            nextColumn=0;
        }

        if( sudoku[row][column] != 0){
            return sudokuSolution(sudoku, nextRow, nextColumn);
        }

        for(int digit=1 ;digit<=9 ; digit++){
            if(isSafe(sudoku,row,column,digit)){
                sudoku[row][column]=digit;
                if (sudokuSolution(sudoku, nextRow, nextColumn)){
                    return true;
                }
                sudoku[row][column]=0;
            }
        }
        return false;
    }

    public static void printSudoku(int sudoku[][] ){
        
        for(int row=0 ; row<9 ; row++){
            for(int column=0 ; column<9 ; column++){
                System.out.print(sudoku[row][column]+" ");
            }
            System.out.println();
        }
    }
}
